// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  identifier     String         @id @default(uuid())
  firstname      String
  lastname       String
  email          String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  passwordHash   String
  passwordSalt   String
  profilePicture String?
  rating         Float
  items          Item[]
  favorite       Json
  location       Location?
  conversations  Conversation[]
}

model Location {
  identifier String @id @default(uuid())
  address    String
  lat        Float
  lon        Float
  user       User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
  userId     String @unique
}

//TODO: need more work
model Conversation {
  identifier String   @id @default(uuid())
  createdAt  DateTime @default(now())
  content    Json // each element represent the one message, but with prefix denote 'owner' || 'offer'
  User       User?    @relation(fields: [userId], references: [identifier])
  userId     String?
}

// the product owner can add as he want :)
model Domain {
  identifier  String     @id @default(uuid())
  title       String     @unique
  description String?
  categories  Category[]
}

model Item {
  identifier    String   @id @default(uuid())
  title         String   @db.VarChar(50)
  images        Json
  description   String
  details       Json?
  user          User     @relation(fields: [userId], references: [identifier])
  userId        String
  sellType      SellType
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      Category @relation(fields: [categoryTitle], references: [title])
  categoryTitle String
  subcategory   String
  requests      Int?
  gone          Boolean  @default(false)
  recipientId   String?
}

enum SellType {
  SWAP
  FREE
}

model Category {
  identifier  String @id @default(cuid())
  title       String @unique
  description String
  domainId    String
  domain      Domain @relation(fields: [domainId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)
  items       Item[]
}
